<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//changeable variables:
light_obj=obj_light;
use_view=view_current;
shadow_size=2.2;  //(scale) 2.5
shadow_blend=c_black;
shadow_alpha=0.4;
shadow_space=39;  //space beetwen shadows (pixels). Smaller value - best looking - most cpu 24
shadow_sprite=spr_darkness;
shadow_mask=spr_shadow_mask;

//light variables
draw_light=true; //use this only if the light is colored or have a lower alpha to increase performance
light_alpha=0.01;
light_color=16765864;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx,yy;

//draw and check light objects:
xx=view_xview[use_view]-(sprite_get_width(shadow_sprite)/2)
yy=view_yview[use_view]-(sprite_get_height(shadow_sprite)/2)
sprite_index=shadow_mask

repeat (((view_wview[use_view]+sprite_get_width(shadow_sprite))/shadow_space)*((view_hview[use_view]+sprite_get_height(shadow_sprite))/shadow_space+48))
//repeat (((view_wview[use_view]+sprite_get_width(shadow_sprite))/shadow_space-48)*((view_hview[use_view]+sprite_get_height(shadow_sprite))/shadow_space+48)) &lt;- Kein Licht
//repeat (((view_wview[use_view]+sprite_get_width(shadow_sprite))/shadow_space)*((view_hview[use_view]+sprite_get_height(shadow_sprite))/shadow_space)) &lt;- Original Code
{
//draw
x=xx
y=yy
if (place_meeting(x,y,light_obj)=false) //if no light at position
{
    draw_sprite_ext(shadow_sprite,image_index,xx,yy,shadow_size,shadow_size,0,shadow_blend,shadow_alpha)
}
else
{
if (draw_light=true)
{
    draw_sprite_ext(shadow_sprite,image_index,xx,yy,shadow_size,shadow_size,0,light_color,light_alpha)}
}

//draw position
if (xx&lt;(view_xview[use_view])+view_wview[use_view]+(sprite_get_width(shadow_sprite)/2)) //if it's not outside the view
{
    xx+=shadow_space
}
else //if it's outside (x)
{
    yy+=shadow_space
    xx=view_xview[use_view]
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
